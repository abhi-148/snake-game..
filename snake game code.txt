import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Random;

public class SnakeGame extends JFrame implements ActionListener, KeyListener {

    private static final long serialVersionUID = 1L;
    private final int tileSize = 20;
    private final int gridSize = 20;
    private final int gameSpeed = 100; // milliseconds per frame
    private int[] snakeX, snakeY;
    private int snakeLength;
    private int direction; // 0 - up, 1 - right, 2 - down, 3 - left
    private int appleX, appleY;

    public SnakeGame() {
        setTitle("Snake Game");
        setSize(tileSize * gridSize, tileSize * gridSize);
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        snakeX = new int[gridSize * gridSize];
        snakeY = new int[gridSize * gridSize];
        snakeLength = 1;
        direction = 1; // start moving to the right

        addKeyListener(this);
        setFocusable(true);

        Timer timer = new Timer(gameSpeed, this);
        timer.start();

        generateApple();

        setVisible(true);
    }

    public void generateApple() {
        Random rand = new Random();
        appleX = rand.nextInt(gridSize);
        appleY = rand.nextInt(gridSize);

        for (int i = 0; i < snakeLength; i++) {
            if (snakeX[i] == appleX && snakeY[i] == appleY) {
                generateApple(); // Regenerate if the apple is on the snake
                return;
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        move();
        checkCollision();
        checkApple();
        repaint();
    }

    public void move() {
        for (int i = snakeLength; i > 0; i--) {
            snakeX[i] = snakeX[i - 1];
            snakeY[i] = snakeY[i - 1];
        }

        switch (direction) {
            case 0:
                snakeY[0]--;
                break;
            case 1:
                snakeX[0]++;
                break;
            case 2:
                snakeY[0]++;
                break;
            case 3:
                snakeX[0]--;
                break;
        }
    }

    public void checkCollision() {
        if (snakeX[0] < 0 || snakeX[0] >= gridSize || snakeY[0] < 0 || snakeY[0] >= gridSize) {
            gameOver();
        }

        for (int i = snakeLength; i > 0; i--) {
            if (snakeX[0] == snakeX[i] && snakeY[0] == snakeY[i]) {
                gameOver();
            }
        }
    }

    public void checkApple() {
        if (snakeX[0] == appleX && snakeY[0] == appleY) {
            snakeLength++;
            generateApple();
        }
    }

    public void gameOver() {
        JOptionPane.showMessageDialog(this, "Game Over!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
        System.exit(0);
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        for (int i = 0; i < snakeLength; i++) {
            g.setColor(Color.GREEN);
            g.fillRect(snakeX[i] * tileSize, snakeY[i] * tileSize, tileSize, tileSize);
        }

        g.setColor(Color.RED);
        g.fillRect(appleX * tileSize, appleY * tileSize, tileSize, tileSize);
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();

        switch (key) {
            case KeyEvent.VK_UP:
                if (direction != 2) direction = 0;
                break;
            case KeyEvent.VK_RIGHT:
                if (direction != 3) direction = 1;
                break;
            case KeyEvent.VK_DOWN:
                if (direction != 0) direction = 2;
                break;
            case KeyEvent.VK_LEFT:
                if (direction != 1) direction = 3;
                break;
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    public static void main(String[] args) {
        new SnakeGame();
    }
}
